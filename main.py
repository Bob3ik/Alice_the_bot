import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import sqlite3
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='8169250352:AAEAUh6DYw8fUG-NUFABtXD4TpAdfDIdlbI')
dp = Dispatcher(storage=MemoryStorage())
router = Router()
scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('events.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS events
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name TEXT,
                   date TEXT,
                   description TEXT,
                   creator_id INTEGER,
                   chat_id INTEGER)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS participants
                  (event_id INTEGER,
                   user_id INTEGER,
                   username TEXT,
                   FOREIGN KEY(event_id) REFERENCES events(id))''')

cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   event_id INTEGER,
                   name TEXT,
                   assigned_to INTEGER,
                   completed BOOLEAN DEFAULT 0,
                   FOREIGN KEY(event_id) REFERENCES events(id))''')

conn.commit()


class EventCreationStates(StatesGroup):
    NAME = State()
    DATE = State()
    DESCRIPTION = State()
    PARTICIPANTS = State()


# –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏
def add_event(name, date, description, creator_id, chat_id):
    cursor.execute('''INSERT INTO events (name, date, description, creator_id, chat_id)
                      VALUES (?, ?, ?, ?, ?)''',
                   (name, date, description, creator_id, chat_id))
    conn.commit()
    return cursor.lastrowid


def add_participants(event_id, participants):
    for participant in participants:
        cursor.execute('''INSERT INTO participants (event_id, user_id, username)
                          VALUES (?, ?, ?)''',
                       (event_id, participant['id'], participant['username']))
    conn.commit()


def get_participants(event_id):
    cursor.execute('SELECT username FROM participants WHERE event_id = ?', (event_id,))
    return [row[0] for row in cursor.fetchall()] or ['–ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_event - –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "/my_events - –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    )


@dp.message(Command("create_event"))
async def create_event(message: types.Message, state: FSMContext):
    await state.set_state(EventCreationStates.NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@dp.message(EventCreationStates.NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(EventCreationStates.DATE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")


@dp.message(EventCreationStates.DATE)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(date=message.text)
        await state.set_state(EventCreationStates.DESCRIPTION)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")


@dp.message(EventCreationStates.DESCRIPTION)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(EventCreationStates.PARTICIPANTS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @user1 @user2):")


@dp.message(EventCreationStates.PARTICIPANTS)
async def process_participants(message: types.Message, state: FSMContext):
    data = await state.get_data()
    participants = message.text.split()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    event_id = add_event(
        name=data['name'],
        date=data['date'],
        description=data['description'],
        creator_id=message.from_user.id,
        chat_id=message.chat.id
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
    participants_list = [{'id': 0, 'username': u} for u in participants]
    add_participants(event_id, participants_list)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    try:
        event_date = datetime.strptime(data['date'], "%d.%m.%Y %H:%M")
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=event_date - timedelta(days=1),
            args=[event_id]
        )
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{data['name']}' —Å–æ–∑–¥–∞–Ω–æ!")
    await state.clear()


@dp.message(Command("my_events"))
async def cmd_my_events(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('''
        SELECT DISTINCT e.id, e.name, e.date, e.description 
        FROM events e
        LEFT JOIN participants p ON e.id = p.event_id
        WHERE e.creator_id = ? OR p.user_id = ?
    ''', (user_id, user_id))

    events = cursor.fetchall()

    if not events:
        await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
        return

    for event in events:
        try:
            date_obj = datetime.strptime(event[2], "%d.%m.%Y %H:%M")
            date_str = date_obj.strftime("%d.%m.%Y")
            time_str = date_obj.strftime("%H:%M")
        except ValueError:
            date_str = time_str = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—ã"

        text = (
            f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[1]}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event[3] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(get_participants(event[0]))}"
        )
        await message.answer(text)


async def send_reminder(event_id):
    cursor.execute("SELECT name, date FROM events WHERE id = ?", (event_id,))
    event = cursor.fetchone()
    if not event:
        return

    participants = get_participants(event_id)
    for username in participants:
        try:
            await bot.send_message(
                chat_id=event_id,  # –ó–∞–≥–ª—É—à–∫–∞: –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π chat_id
                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event[0]} —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def main():
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
