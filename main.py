import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
import sqlite3
import asyncio

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='8169250352:AAEAUh6DYw8fUG-NUFABtXD4TpAdfDIdlbI')
dp = Dispatcher(storage=MemoryStorage())
router = Router()
scheduler = AsyncIOScheduler()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('events.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS events
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name TEXT,
                   date TEXT,
                   description TEXT,
                   creator_id INTEGER,
                   chat_id INTEGER)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS participants
                  (event_id INTEGER,
                   user_id INTEGER,
                   username TEXT,
                   FOREIGN KEY(event_id) REFERENCES events(id))''')

cursor.execute('''CREATE TABLE IF NOT EXISTS tasks
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   event_id INTEGER,
                   name TEXT,
                   assigned_to INTEGER,
                   completed BOOLEAN DEFAULT 0,
                   FOREIGN KEY(event_id) REFERENCES events(id))''')

conn.commit()


class EventCreationStates(StatesGroup):
    NAME = State()
    DATE = State()
    DESCRIPTION = State()
    PARTICIPANTS = State()


# –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏
def add_event(name, date, description, creator_id, chat_id):
    cursor.execute('''INSERT INTO events (name, date, description, creator_id, chat_id)
                      VALUES (?, ?, ?, ?, ?)''',
                   (name, date, description, creator_id, chat_id))
    conn.commit()
    return cursor.lastrowid


def add_participants(event_id, participants):
    for participant in participants:
        cursor.execute('''INSERT INTO participants (event_id, user_id, username)
                          VALUES (?, ?, ?)''',
                       (event_id, participant['id'], participant['username']))
    conn.commit()


def get_participants(event_id):
    cursor.execute('SELECT username FROM participants WHERE event_id = ?', (event_id,))
    return [row[0] for row in cursor.fetchall()] or ['–ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
        "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_event - –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "/my_events - –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
        "/delete_event - –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "/remind_me - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/add_tasks - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        "/view_tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏"
    )


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
class EventDeletionStates(StatesGroup):
    CONFIRM_DELETE = State()


# –î–æ–ø–æ–ª–Ω–∏–º —Ö–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏
def delete_event(event_id):
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute('DELETE FROM participants WHERE event_id = ?', (event_id,))
    cursor.execute('DELETE FROM tasks WHERE event_id = ?', (event_id,))
    cursor.execute('DELETE FROM events WHERE id = ?', (event_id,))
    conn.commit()


def get_user_events(user_id):
    cursor.execute('SELECT id, name, date FROM events WHERE creator_id = ?', (user_id,))
    return cursor.fetchall()


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("delete_event"))
async def cmd_delete_event(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    events = get_user_events(user_id)

    if not events:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for event in events:
        event_id, name, date = event
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{name} ({date})",
                callback_data=f"confirm_delete_{event_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def process_delete_event(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    cursor.execute('SELECT creator_id FROM events WHERE id = ?', (event_id,))
    result = cursor.fetchone()

    if not result or result[0] != user_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    delete_event(event_id)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    await callback.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)


@dp.message(Command("create_event"))
async def create_event(message: types.Message, state: FSMContext):
    await state.set_state(EventCreationStates.NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")


@dp.message(EventCreationStates.NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(EventCreationStates.DATE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")


@dp.message(EventCreationStates.DATE)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(date=message.text)
        await state.set_state(EventCreationStates.DESCRIPTION)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")


@dp.message(EventCreationStates.DESCRIPTION)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(EventCreationStates.PARTICIPANTS)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @user1 @user2):")


@dp.message(EventCreationStates.PARTICIPANTS)
async def process_participants(message: types.Message, state: FSMContext):
    data = await state.get_data()
    participants = message.text.split()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    event_id = add_event(
        name=data['name'],
        date=data['date'],
        description=data['description'],
        creator_id=message.from_user.id,
        chat_id=message.chat.id
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
    participants_list = [{'id': 0, 'username': u} for u in participants]
    add_participants(event_id, participants_list)

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    try:
        event_date = datetime.strptime(data['date'], "%d.%m.%Y %H:%M")
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=event_date - timedelta(days=1),
            args=[event_id]
        )
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    await message.answer(f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{data['name']}' —Å–æ–∑–¥–∞–Ω–æ!")
    await state.clear()


@dp.message(Command("my_events"))
async def cmd_my_events(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('''
        SELECT DISTINCT e.id, e.name, e.date, e.description 
        FROM events e
        LEFT JOIN participants p ON e.id = p.event_id
        WHERE e.creator_id = ? OR p.user_id = ?
    ''', (user_id, user_id))

    events = cursor.fetchall()

    if not events:
        await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
        return

    for event in events:
        try:
            date_obj = datetime.strptime(event[2], "%d.%m.%Y %H:%M")
            date_str = date_obj.strftime("%d.%m.%Y")
            time_str = date_obj.strftime("%H:%M")
        except ValueError:
            date_str = time_str = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞—Ç—ã"

        text = (
            f"üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[1]}\n"
            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event[3] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(get_participants(event[0]))}"
        )
        await message.answer(text)


async def send_reminder(event_id):
    cursor.execute("SELECT name, date FROM events WHERE id = ?", (event_id,))
    event = cursor.fetchone()
    if not event:
        return

    participants = get_participants(event_id)
    for username in participants:
        try:
            await bot.send_message(
                chat_id=event_id,  # –ó–∞–≥–ª—É—à–∫–∞: –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π chat_id
                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {event[0]} —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
cursor.execute('''CREATE TABLE IF NOT EXISTS reminders
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   event_id INTEGER,
                   hours_before INTEGER,
                   reminder_sent BOOLEAN DEFAULT 0)''')
conn.commit()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class RemindMeStates(StatesGroup):
    SELECT_EVENT = State()
    SELECT_HOURS = State()


# –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
def add_reminder(user_id, event_id, hours_before):
    cursor.execute('''INSERT INTO reminders (user_id, event_id, hours_before)
                      VALUES (?, ?, ?)''',
                   (user_id, event_id, hours_before))
    conn.commit()
    return cursor.lastrowid


def get_user_events_with_participation(user_id):
    cursor.execute('''
        SELECT DISTINCT e.id, e.name, e.date 
        FROM events e
        LEFT JOIN participants p ON e.id = p.event_id
        WHERE e.creator_id = ? OR p.user_id = ?
    ''', (user_id, user_id))
    return cursor.fetchall()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("remind_me"))
async def cmd_remind_me(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    events = get_user_events_with_participation(user_id)

    if not events:
        await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for event in events:
        event_id, name, date = event
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{name} ({date})",
                callback_data=f"remind_event_{event_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(RemindMeStates.SELECT_EVENT)


@dp.callback_query(F.data.startswith("remind_event_"), RemindMeStates.SELECT_EVENT)
async def process_remind_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(event_id=event_id)

    await callback.message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    await state.set_state(RemindMeStates.SELECT_HOURS)
    await callback.answer()


@dp.message(RemindMeStates.SELECT_HOURS)
async def process_remind_hours(message: types.Message, state: FSMContext):
    try:
        hours = int(message.text)
        if hours <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    event_id = data['event_id']
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    cursor.execute('SELECT date FROM events WHERE id = ?', (event_id,))
    event_date = cursor.fetchone()
    if not event_date:
        await message.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    add_reminder(user_id, event_id, hours)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    try:
        event_datetime = datetime.strptime(event_date[0], "%d.%m.%Y %H:%M")
        reminder_time = event_datetime - timedelta(hours=hours)

        scheduler.add_job(
            send_personal_reminder,
            'date',
            run_date=reminder_time,
            args=[user_id, event_id]
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {hours} —á–∞—Å–æ–≤ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    await state.clear()


async def send_personal_reminder(user_id, event_id):
    try:
        cursor.execute('SELECT name, date FROM events WHERE id = ?', (event_id,))
        event = cursor.fetchone()
        if event:
            await bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event[0]}' –Ω–∞—á–Ω—ë—Ç—Å—è {event[1]}!"
            )
            # –ü–æ–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            cursor.execute('''UPDATE reminders SET reminder_sent = 1
                           WHERE user_id = ? AND event_id = ?''',
                           (user_id, event_id))
            conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


class AddTasksStates(StatesGroup):
    SELECT_EVENT = State()
    TASKS_COUNT = State()
    TASK_INPUT = State()


class ViewTasksStates(StatesGroup):
    SELECT_EVENT = State()


# –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á
def add_task(event_id, name, assigned_to=None):
    cursor.execute('''INSERT INTO tasks (event_id, name, assigned_to)
                      VALUES (?, ?, ?)''',
                   (event_id, name, assigned_to))
    conn.commit()
    return cursor.lastrowid


def get_tasks(event_id):
    cursor.execute('''SELECT id, name, assigned_to, completed 
                      FROM tasks WHERE event_id = ?''', (event_id,))
    return cursor.fetchall()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("add_tasks"))
async def cmd_add_tasks(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    events = get_user_events_with_participation(user_id)

    if not events:
        await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for event in events:
        event_id, name, date = event
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{name} ({date})",
                callback_data=f"tasks_event_{event_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:", reply_markup=keyboard)
    await state.set_state(AddTasksStates.SELECT_EVENT)


@dp.callback_query(F.data.startswith("tasks_event_"), AddTasksStates.SELECT_EVENT)
async def process_tasks_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(event_id=event_id)
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
    await state.set_state(AddTasksStates.TASKS_COUNT)
    await callback.answer()


@dp.message(AddTasksStates.TASKS_COUNT)
async def process_tasks_count(message: types.Message, state: FSMContext):
    try:
        tasks_count = int(message.text)
        if tasks_count <= 0:
            raise ValueError
        await state.update_data(tasks_count=tasks_count, current_task=1)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ 1 –∏–∑ {tasks_count}:")
        await state.set_state(AddTasksStates.TASK_INPUT)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")


@dp.message(AddTasksStates.TASK_INPUT)
async def process_task_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    tasks_count = data['tasks_count']
    current_task = data['current_task']

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
    add_task(event_id, message.text)

    if current_task < tasks_count:
        new_current = current_task + 1
        await state.update_data(current_task=new_current)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {new_current} –∏–∑ {tasks_count}:")
    else:
        await message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        await state.clear()


@dp.message(Command("view_tasks"))
async def cmd_view_tasks(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    events = get_user_events_with_participation(user_id)

    if not events:
        await message.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for event in events:
        event_id, name, date = event
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{name} ({date})",
                callback_data=f"view_tasks_{event_id}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:", reply_markup=keyboard)
    await state.set_state(ViewTasksStates.SELECT_EVENT)


@dp.callback_query(F.data.startswith("view_tasks_"), ViewTasksStates.SELECT_EVENT)
async def process_view_tasks(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    tasks = get_tasks(event_id)

    if not tasks:
        await callback.message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –∑–∞–¥–∞—á")
        await callback.answer()
        return

    response = ["üìå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:"]
    for task in tasks:
        status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task[3] else "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        assigned = f" (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {task[2]})" if task[2] else ""
        response.append(f"{task[1]} {status}{assigned}")

    await callback.message.answer("\n".join(response))
    await callback.answer()
    await state.clear()


async def main():
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
